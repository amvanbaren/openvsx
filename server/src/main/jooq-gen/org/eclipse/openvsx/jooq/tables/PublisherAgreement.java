/*
 * This file is generated by jOOQ.
 */
package org.eclipse.openvsx.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.eclipse.openvsx.jooq.Keys;
import org.eclipse.openvsx.jooq.Public;
import org.eclipse.openvsx.jooq.tables.records.PublisherAgreementRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PublisherAgreement extends TableImpl<PublisherAgreementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.publisher_agreement</code>
     */
    public static final PublisherAgreement PUBLISHER_AGREEMENT = new PublisherAgreement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PublisherAgreementRecord> getRecordType() {
        return PublisherAgreementRecord.class;
    }

    /**
     * The column <code>public.publisher_agreement.id</code>.
     */
    public final TableField<PublisherAgreementRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.publisher_agreement.user_id</code>.
     */
    public final TableField<PublisherAgreementRecord, String> USER_ID = createField(DSL.name("user_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.publisher_agreement.active</code>.
     */
    public final TableField<PublisherAgreementRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.publisher_agreement.document_id</code>.
     */
    public final TableField<PublisherAgreementRecord, String> DOCUMENT_ID = createField(DSL.name("document_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.publisher_agreement.version</code>.
     */
    public final TableField<PublisherAgreementRecord, String> VERSION = createField(DSL.name("version"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.publisher_agreement.person_id</code>.
     */
    public final TableField<PublisherAgreementRecord, String> PERSON_ID = createField(DSL.name("person_id"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.publisher_agreement.timestamp</code>.
     */
    public final TableField<PublisherAgreementRecord, LocalDateTime> TIMESTAMP = createField(DSL.name("timestamp"), SQLDataType.LOCALDATETIME(6), this, "");

    private PublisherAgreement(Name alias, Table<PublisherAgreementRecord> aliased) {
        this(alias, aliased, null);
    }

    private PublisherAgreement(Name alias, Table<PublisherAgreementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.publisher_agreement</code> table reference
     */
    public PublisherAgreement(String alias) {
        this(DSL.name(alias), PUBLISHER_AGREEMENT);
    }

    /**
     * Create an aliased <code>public.publisher_agreement</code> table reference
     */
    public PublisherAgreement(Name alias) {
        this(alias, PUBLISHER_AGREEMENT);
    }

    /**
     * Create a <code>public.publisher_agreement</code> table reference
     */
    public PublisherAgreement() {
        this(DSL.name("publisher_agreement"), null);
    }

    public <O extends Record> PublisherAgreement(Table<O> child, ForeignKey<O, PublisherAgreementRecord> key) {
        super(child, key, PUBLISHER_AGREEMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<PublisherAgreementRecord> getPrimaryKey() {
        return Keys.PUBLISHER_AGREEMENT_PKEY;
    }

    @Override
    public List<UniqueKey<PublisherAgreementRecord>> getKeys() {
        return Arrays.<UniqueKey<PublisherAgreementRecord>>asList(Keys.PUBLISHER_AGREEMENT_PKEY);
    }

    @Override
    public PublisherAgreement as(String alias) {
        return new PublisherAgreement(DSL.name(alias), this);
    }

    @Override
    public PublisherAgreement as(Name alias) {
        return new PublisherAgreement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PublisherAgreement rename(String name) {
        return new PublisherAgreement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PublisherAgreement rename(Name name) {
        return new PublisherAgreement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Boolean, String, String, String, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
